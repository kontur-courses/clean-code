using FluentAssertions;
using Markdown;
using Microsoft.VisualStudio.TestPlatform.ObjectModel;

namespace MarkdownTests;

public class MdTests
{


    [TestCase("_окруженный с двух сторон_", "<em>окруженный с двух сторон</em>",  TestName = "работа тега _")]
    [TestCase("__окруженный с двух сторон__", "<strong>окруженный с двух сторон</strong>", TestName = "работа тега __")]
    [TestCase("# Заголовки", "<h1>Заголовки</h1>")]
    [TestCase(@"\_Вот это\_", @"_Вот это_", TestName = "Экранирование знаков разметки оставляет знаки нетронутыми, а сами символы экранирования исчезают")]
    [TestCase(@"Здесь сим\волы экранирования\ \должны остаться.\", @"Здесь сим\волы экранирования\ \должны остаться.\", TestName = "знак экранирования исчезает из разметки только если экранирует что-либо")]
    [TestCase(@"\\_вот это будет выделено тегом_", @"\\<em>вот это будет выделено тегом</em>", TestName = "экранирование знака экранирования")]
    [TestCase(@"Внутри __двойного выделения _одинарное_ тоже__ работает.", @"Внутри <strong>двойного выделения <em>одинарное</em> тоже</strong> работает.")]
    [TestCase(@"внутри _одинарного __двойное__ не_ работает.", @"внутри <em>одинарного __двойное__ не</em> работает.")]
    [TestCase(@"Подчерки внутри текста c цифрами_12_3 не считаются выделением", @"Подчерки внутри текста c цифрами_12_3 не считаются выделением")]
    [TestCase(@"_нач_але, и в сер_еди_не, и в кон_це._", @"<em>нач</em>але, и в сер<em>еди</em>не, и в кон<em>це.</em>")]
    [TestCase(@"выделение в ра_зных сл_овах не работает", @"выделение в ра_зных сл_овах не работает")]
    [TestCase(@"__Непарные_ символы в рамках одного абзаца не считаются выделением", @"__Непарные_ символы в рамках одного абзаца не считаются выделением")]
    [TestCase(@"эти_ подчерки_ не считаются выделением", @"эти_ подчерки_ не считаются выделением")]
    [TestCase(@"эти _подчерки _не считаются_ окончанием выделения", @"эти <em>подчерки _не считаются</em> окончанием выделения")]
    [TestCase(@"В случае __пересечения _двойных__ и одинарных_ подчерков", @"В случае __пересечения _двойных__ и одинарных_ подчерков")]
    [TestCase(@"Если внутри подчерков пустая строка ____, то они остаются символами подчерка.", @"Если внутри подчерков пустая строка ____, то они остаются символами подчерка.")]
    [TestCase(@"# Заголовок __с _разными_ символами__", @"# Заголовок <strong>с <em>разными</em> символами</strong>")]
    public void Render_ReturnsCorrectString_OnDifferent(string input, string expected)
    {
        var md = new Md();

        md.Render(input).Should().BeEquivalentTo(expected);
    }
}